name: SONAR

on:
  workflow_call:
    inputs:
      JAVA_VERSION:
        type: number
        required: false
        default: 11
        description: 'The Java version to use for compiling and testing. Defaults to 11'
      JAVA_DISTRIBUTION:
        type: string
        required: false
        default: 'corretto'
        description: 'The Java distribution to use. Defaults to Corretto'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DOMAIN_OWNER:
        required: true
      AWS_DOMAIN:
        required: true
      SONAR_TOKEN:
        required: true
      SONAR_PROJECT_KEY:
        required: true
      JACOCO_REPORT_PATH:
        required: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # Configure AWS CLI
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Obtain token and saves it as an env variable
      - name: Get and Save AWS token
        run: echo "AWS_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ secrets.AWS_DOMAIN }} --domain-owner ${{ secrets.AWS_DOMAIN_OWNER }} --query authorizationToken --output text)" >> $GITHUB_ENV

      # Caching Corretto JDK
      - name: Cache Corretto JDK
        if: inputs.JAVA_DISTRIBUTION == 'corretto'
        id: cache-jdk
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/jdk
          key: ${{ runner.os }}-jdk
          restore-keys: ${{ runner.os }}-jdk
          
      # Configure Java. This creates the settings.xml
      - name: Set up Correto JDK ${{ inputs.JAVA_VERSION }}
        if: inputs.JAVA_DISTRIBUTION == 'corretto'
        uses: actions/setup-java@v3
        with:
          distribution: 'jdkfile'
          jdkfile: ${{ runner.temp }}/jdk/java_package.tar.gz
          java-version: ${{ inputs.JAVA_VERSION }}
          architecture: x64
          # Maven settings.xml configuration used for deploy
          server-id: adtomiclabs--repository.adtomiclabs
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      # Configure Java. This creates the settings.xml
      - name: Set up JDK ${{ inputs.JAVA_VERSION }}
        if: inputs.JAVA_DISTRIBUTION != 'corretto'
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.JAVA_DISTRIBUTION }}
          java-version: ${{ inputs.JAVA_VERSION }}
          # Maven settings.xml configuration used for deploy
          server-id: adtomiclabs--repository.adtomiclabs
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Caching maven dependencies when there are no changes in pom.xml
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          MAVEN_USERNAME: ${{ env.AWS_ACCESS_KEY_ID }}
          MAVEN_PASSWORD: ${{ env.AWS_AUTH_TOKEN }}
        run: mvn -B -U clean org.jacoco:jacoco-maven-plugin:prepare-agent verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.coverage.jacoco.xmlReportPaths=${{ github.workspace }}/${{ secrets.JACOCO_REPORT_PATH }} -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}