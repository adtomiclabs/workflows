name: Close Release

on:
  workflow_call:
    inputs:
      RELEASE_VERSION:
        required: true
        type: string
        description: 'The library version'
      BASE_BRANCH:
        required: true
        type: string
        description: 'The base branch to use for the PR'
      JAVA_VERSION:
        required: true
        type: number
        description: 'The Java version to use for compiling and testing'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DOMAIN_OWNER:
        required: true
      AWS_DOMAIN:
        required: true
      GIT_CONFIG_USER:
        required: true
      GIT_CONFIG_USER_EMAIL:
        required: true

jobs:
  close-release:
    name: Close Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Configure AWS CLI
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Obtain token and saves it as an env variable
      - name: Get and Save AWS token
        run: echo "AWS_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ secrets.AWS_DOMAIN }} --domain-owner ${{ secrets.AWS_DOMAIN_OWNER }} --query authorizationToken --output text)" >> $GITHUB_ENV

      # Configure Java. This creates the settings.xml
      - name: Set up JDK ${{ inputs.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: ${{ inputs.JAVA_VERSION }}
          # Maven settings.xml configuration used for deploy
          server-id: adtomiclabs--repository.adtomiclabs
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      # Caching maven dependencies when there are no changes in pom.xml
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Sets up the git user used to push the version change
      - name: Configure Git user
        run: |
          git config user.email ${{ secrets.GIT_CONFIG_USER_EMAIL }}
          git config user.name ${{ secrets.GIT_CONFIG_USER }}

      # Create close-release branch
      - name: Create Branch close-release/${{inputs.RELEASE_VERSION}}
        run: |
          git pull
          git checkout -b close-release/${{inputs.RELEASE_VERSION}}

      - name: Set next SNAPSHOT
        run: |
          mvn -B -T 1C -ntp versions:set -DnextSnapshot=true -DprocessAllModules=true -DgenerateBackupPoms=false
          git add .
          git commit -m "Set next snapshot version [skip ci]"
          git push -u origin close-release/${{inputs.RELEASE_VERSION}}
        env:
          MAVEN_USERNAME: ${{ secrets.AWS_ACCESS_KEY_ID }}
          MAVEN_PASSWORD: ${{ env.AWS_AUTH_TOKEN }}

      - name: Create pull request
        uses: thomaseizinger/create-pull-request@1.3.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: close-release/${{inputs.RELEASE_VERSION}}
          base: ${{inputs.BASE_BRANCH}}
          title: Close Release ${{inputs.RELEASE_VERSION}}
          reviewers: ${{ github.actor }}
          body: |
            This PR was created in response to a manual trigger of the release workflow here:

            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}.
