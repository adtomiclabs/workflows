name: Deploy library to CodeArtifact

on:
  workflow_call:
    inputs:
      RELEASE_VERSION:
        required: true
        type: string
        description: 'The library version'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DOMAIN_OWNER:
        required: true
      AWS_DOMAIN:
        required: true
      GIT_CONFIG_USER:
        required: true
      GIT_CONFIG_USER_EMAIL:
        required: true

jobs:
  deploy:
    name: Deploy library
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Configure AWS CLI
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Obtain token and saves it as an env variable
      - name: Get and Save AWS token
        run: echo "AWS_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ secrets.AWS_DOMAIN }} --domain-owner ${{ secrets.AWS_DOMAIN_OWNER }} --query authorizationToken --output text)" >> $GITHUB_ENV

      # Configure Java. This creates the settings.xml
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '8'
          # Maven settings.xml configuration used for deploy
          server-id: adtomiclabs--repository.adtomiclabs
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      # Sets up the git user used to push the version change
      - name: Configure Git user
        run: |
          git config user.email ${{ secrets.GIT_CONFIG_USER_EMAIL }}
          git config user.name ${{ secrets.GIT_CONFIG_USER }}

      # Prepares the release
      - name: Update Release version to ${{ inputs.RELEASE_VERSION }}
        run: |
          mvn -B -ntp versions:set -DnewVersion=${{ inputs.RELEASE_VERSION }} -DprocessAllModules=true -DgenerateBackupPoms=false

      - name: Deploy to CodeArtifact
        run: |
          mvn -B -T 1C -ntp clean deploy -Dmaven.test.skip=true
        env:
          MAVEN_USERNAME: ${{ secrets.AWS_ACCESS_KEY_ID }}
          MAVEN_PASSWORD: ${{ env.AWS_AUTH_TOKEN }}
