name: Deploy on ECS

on:
  workflow_call:
    inputs:
      JAVA_VERSION:
        required: false
        type: string
        description: 'The Java version to use for compiling'
        default: '17'
      PROFILE:
        required: false
        type: string
        description: 'The profile to use for deploying the application'
        default: 'beta'
      DEVELOPMENT_VERSION:
        required: true
        type: string
        description: 'The version or tag to identify the image'
      AWS_ECS_CLUSTER_NAME:
        required: false
        type: string
        description: 'The name of the cluster where the services and tasks are defined'
        default: 'Beta'
      AWS_ECR_REPOSITORY:
        required: true
        type: string
        description: 'The AWS ECR repository name from where the image is downloaded'
      AWS_TASK_DEFINITION_NAME:
        required: true
        type: string
        description: 'The name of the task definition to use for the deployment'
      AWS_ECS_CONTAINER_NAME:
        required: true
        type: string
        description: 'The name of the container to which the image is going to be deployed'
      AWS_ECS_SERVICE_NAME:
        required: true
        type: string
        description: 'The name of the service to which the task is going to be deployed'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_DOMAIN_OWNER:
        required: true
      AWS_DOMAIN:
        required: true
      AWS_CODE_ARTIFACT_REGION:
        required: true
      AWS_ECR_REGION:
        required: true

jobs:
  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Configure Java. This creates the settings.xml
      - name: Set up JDK ${{ inputs.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: ${{ inputs.JAVA_VERSION }}
          # Maven settings.xml configuration used for deploy
          server-id: adtomiclabs--repository.adtomiclabs
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      # Caching maven dependencies when there are no changes in pom.xml
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      # Configure AWS CLI
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_CODE_ARTIFACT_REGION }}

      # Obtain token and saves it as an env variable
      - name: Get and Save AWS token
        run: echo "AWS_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ secrets.AWS_DOMAIN }} --domain-owner ${{ secrets.AWS_DOMAIN_OWNER }} --query authorizationToken --output text)" >> $GITHUB_ENV

      - name: Run Tests
        run: mvn -B -U -T 1C -ntp test
        env:
          MAVEN_USERNAME: ${{ secrets.AWS_ACCESS_KEY_ID }}
          MAVEN_PASSWORD: ${{ env.AWS_AUTH_TOKEN }}

  build:
    name: Build Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Configure Java. This creates the settings.xml
      - name: Set up JDK ${{ inputs.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: ${{ inputs.JAVA_VERSION }}
          # Maven settings.xml configuration used for deploy
          server-id: adtomiclabs--repository.adtomiclabs
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      # Caching maven dependencies when there are no changes in pom.xml
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      # Configure AWS CLI for login to ECR
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_ECR_REGION }}

      # Log in to ECR in order to push images
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Configure AWS CLI for login to CodeArtifact
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_CODE_ARTIFACT_REGION }}

      # Obtain token and saves it as an env variable
      - name: Get and Save AWS token
        run: echo "AWS_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain ${{ secrets.AWS_DOMAIN }} --domain-owner ${{ secrets.AWS_DOMAIN_OWNER }} --query authorizationToken --output text)" >> $GITHUB_ENV

      # Builds the image
      - name: Build Docker image
        id: build-image
        run: |
          mvn -B -U -T 1C -ntp install jib:build -Djib.to.image=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }} -Djib.to.tags=${{ env.DEVELOPMENT_VERSION }} -Dmaven.test.skip=true
        env:
          MAVEN_USERNAME: ${{ secrets.AWS_ACCESS_KEY_ID }}
          MAVEN_PASSWORD: ${{ env.AWS_AUTH_TOKEN }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.AWS_ECR_REPOSITORY }}
          SPRING_PROFILE: ${{ inputs.PROFILE }}
          DEVELOPMENT_VERSION: ${{ inputs.DEVELOPMENT_VERSION }}

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Configure AWS CLI
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_ECR_REGION }}

      # Log in to ECR in order to push images
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Download the task definition file
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.AWS_TASK_DEFINITION_NAME }} --query taskDefinition > task-definition.json

      # Set the new docker image in the task definition downloaded
      - name: Set new docker image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.AWS_ECS_CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.DEVELOPMENT_VERSION }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.AWS_ECR_REPOSITORY }}
          DEVELOPMENT_VERSION: ${{ inputs.DEVELOPMENT_VERSION }}

      # Deploy the task definition into the given service in the given cluster
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ inputs.AWS_ECS_SERVICE_NAME }}
          cluster: ${{ inputs.AWS_ECS_CLUSTER_NAME }}
          wait-for-service-stability: false
